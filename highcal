#!/usr/bin/env python3

# ------------------------------------------------------------------
# "THE PIZZA-WARE LICENSE" (Revision 42):
# Peter Hofmann <pcode@uninformativ.de> wrote this file. As long as you
# retain this notice you can do whatever you want with this stuff. If we
# meet some day, and you think this stuff is worth it, you can buy me a
# pizza in return.
# ------------------------------------------------------------------

# Create calendars like cal(1) but optionally highlight some days. Feed
# this script a list of days on STDIN, one day per line. Like so:
#
#  $ ./highcal <<EOF
#  2011-10-16
#  2011-07-08
#  EOF
#
# The current month will be shown plus the two following months. The
# script will highlight the dates from STDIN.


import datetime
import calendar
import os
import sys

def makeCal(year, month, highlights, colors):
    # Build header: Name of the month/year and a list of the days of the
    # week. Pad both to 21 chars.
    d = datetime.date(year, month, 1)
    out = d.strftime('%B %Y').center(20) + ' \n'
    header = ''
    for i in range(3, 10):
        d = datetime.date(2011, 10, i)
        header += d.strftime('%a')[0:2] + ' '
    out += header + '\n'

    # "calendar" can serve as an easy way to build a calendar like
    # cal(1). Count the number of lines and pad to 6 lines (so each and
    # every month has the same amount of lines).
    c = calendar.Calendar()
    weeks = c.monthdays2calendar(year, month)
    hadLines = 0
    for w in weeks:
        for (day, weekday) in w:
            if day == 0:
                out += '   '
            else:
                # Check if we have to highlight this day (a highlight
                # may exist or that the is equal to "today").
                d = datetime.date(year, month, day)
                high = d.strftime('%Y-%m-%d') in highlights
                isToday = (d == datetime.date.today())
                if isToday:
                    out += colors['today']
                if high:
                    out += colors['high']
                out += '{0:2d}'.format(day)
                if high or isToday:
                    out += colors['reset']
                out += ' '
            if weekday == 6:
                out += '\n'
                hadLines += 1
    out += ((' ' * 21) + '\n') * (6 - hadLines)
    return out

def readHighlights():
    # Expect a list of dates according to the format "year-month-day",
    # like "2011-10-16".
    lines = sys.stdin.readlines()
    dates = [l.strip().split()[0] for l in lines]
    return set(dates)

# Use tput(1) to retrieve the colors for the current terminal.
colors = {
        'high': os.popen('tput bold').read() + os.popen('tput setaf 1').read(),
        'today': os.popen('tput rev').read(),
        'reset': os.popen('tput sgr0').read()
        }

# Read dates to highlight from STDIN if it's not a terminal.
highlights = set()
if not os.isatty(0):
    highlights = readHighlights()

# Build the calendars for this month and the following two months. As we
# know there's only going to be two additional months, year-wrapping
# will be easy.
today = datetime.date.today()
year = today.year
month = today.month
outs = []
for i in range(3):
    outs += [makeCal(year, month, highlights, colors)]
    month += 1
    if month > 12:
        month -= 12
        year += 1

# Emulate paste(1), that is place the three calendars side by side.
side = ''
outs = [o.split('\n') for o in outs]
for i in range(8):
    side += outs[0][i] + '   '
    side += outs[1][i] + '   '
    side += outs[2][i]
    side += '\n'

print(side.rstrip())

# vim: set ts=4 sw=4 et :

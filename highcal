#!/usr/bin/env ruby
# encoding: UTF-8

require 'date'

module Colors
	@table = {
		:today     => ['tput rev', nil],
		:highlight => ['tput bold; tput setaf 1', nil],
		:reset     => ['tput sgr0', nil],
	}

	def Colors.[](which)
		if !STDOUT.tty? &&
		   !(ENV['GITODO_FORCE_COLOR'] || ENV['HIGHCAL_FORCE_COLOR'])
			return ''
		end

		# Lazy allocation to save useless forks.
		if @table[which][1] == nil
			@table[which][1] = `#{@table[which][0]}`
		end

		return @table[which][1]
	end
end

class DatePos
	attr_accessor :at
	attr_accessor :first
	attr_accessor :month

	def initialize(at)
		@first = true
		@at = at
		@my_month = at.month
	end

	def is_my_month?
		@at.month == @my_month
	end

	def show_and_advance(highlights)
		if is_my_month?
			if @at == Date.today
				print Colors[:today]
			end

			if highlights.include? at
				print Colors[:highlight]
			end

			printf '%2d', @at.day
			@at = @at.next_day
			print Colors[:reset]
			print ' '
		else
			print '   '
		end
	end
end


# Do not read from STDIN if it's not a tty. I want to be able to simply
# call this script and see the calendar without being *forced* to
# specify highlights.
highlights = []
if !STDIN.tty?
	highlights << DateTime.parse(STDIN.readline.strip).to_date
end

# Show the current month and the following two months. Each DatePos
# object holds the position in the n'th month.
start = Date.today
start = Date.new(start.year, start.month, 1)
positions = [DatePos.new(start),
             DatePos.new(start.next_month()),
             DatePos.new(start.next_month().next_month())]

# Header: Month name + year.
for month_add in 0..2
	pos = positions[month_add]
	print pos.at.strftime('%B %Y').center(21)
	print '   '
end
print "\n"

# Weekdays.
for month_add in 0..2
	d = Date.new(2011, 10, 3)
	for i in 1..7
		print d.strftime('%a')[0..1] + ' '
		d = d.next_day
	end
	print '   '
end
print "\n"

# Show the calendars line by line.
for line in 1..6
	for month_add in 0..2
		pos = positions[month_add]
		if pos.first
			# If this is the first line of this month, then skip those
			# days which are in the previous month.
			pos.first = false
			print '   ' * (pos.at.cwday - 1)
			for i in pos.at.cwday..7
				pos.show_and_advance(highlights)
			end
		else
			for i in 1..7
				pos.show_and_advance(highlights)
			end
		end
		positions[month_add] = pos
		print '   '
	end
	print "\n"
end

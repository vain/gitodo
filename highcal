#!/usr/bin/env ruby
# encoding: UTF-8

require 'date'

module Colors
	@table = {
		:today     => "\e[7m",
		:highlight => "\e[1;31m",
		:reset     => "\e[0m",
	}

	def Colors.[](which)
		if !STDOUT.tty? &&
		   !(ENV['GITODO_FORCE_COLOR'] || ENV['HIGHCAL_FORCE_COLOR'])
			return ''
		else
			return @table[which]
		end
	end
end

class DatePos
	attr_accessor :at
	attr_accessor :first
	attr_accessor :month

	def initialize(at)
		@first = true
		@at = at
		@my_month = at.month
	end

	def is_my_month?
		@at.month == @my_month
	end

	# Print the current day (maybe highlight it) and advance to the next
	# day. If the current day is not in "my" month, then simply print
	# spaces.
	def show_and_advance(highlights)
		if is_my_month?
			print ' '

			if @at == Date.today
				print Colors[:today]
			end

			if highlights.include? at
				print Colors[:highlight]
			end

			printf '%2d', @at.day
			@at = @at.next_day
			print Colors[:reset]
		else
			print '   '
		end
	end

	def show_cweek
		if is_my_month?
			printf '%2d ', @at.cweek
		else
			print '   '
		end
	end
end


# Do not read from STDIN if it's not a tty. I want to be able to simply
# call this script and see the calendar without being *forced* to
# specify highlights.
highlights = []
if !STDIN.tty?
	STDIN.readlines.each do |line|
		highlights << DateTime.parse(line.strip).to_date
	end
end

# Show the current month and the following two months. Each DatePos
# object holds the position in the n'th month.
start = Date.today
start = Date.new(start.year, start.month, 1)
positions = [DatePos.new(start),
             DatePos.new(start.next_month()),
             DatePos.new(start.next_month().next_month())]

# Header: Month name + year.
for month_add in 0..2
	# Left padding for centered month name.
	print '    '

	pos = positions[month_add]
	print pos.at.strftime('%B %Y').center(20)
	if month_add != 2
		# Separator between two months.
		print '    '
	end
end
print "\n"

# Weekdays.
for month_add in 0..2
	# Left padding for week lines.
	print '   '

	d = Date.new(2011, 10, 3)
	for i in 1..7
		print ' ' + d.strftime('%a')[0..1]
		d = d.next_day
	end
	if month_add != 2
		# Separator between two months.
		print '    '
	end
end
print "\n"

# Show the calendars line by line.
for line in 1..6
	for month_add in 0..2
		pos = positions[month_add]
		pos.show_cweek
		if pos.first
			# If this is the first line of this month, then skip those
			# days which are in the previous month.
			pos.first = false
			print '   ' * (pos.at.cwday - 1)
			for i in pos.at.cwday..7
				pos.show_and_advance(highlights)
			end
		else
			for i in 1..7
				pos.show_and_advance(highlights)
			end
		end
		positions[month_add] = pos
		if month_add != 2
			# Separator between two months.
			print '    '
		end
	end
	print "\n"
end

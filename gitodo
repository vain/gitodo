#!/bin/bash

# ------------------------------------------------------------------
# "THE PIZZA-WARE LICENSE" (Revision 42):
# Peter Hofmann <pcode@uninformativ.de> wrote this file. As long as you
# retain this notice you can do whatever you want with this stuff. If
# we meet some day, and you think this stuff is worth it, you can buy
# me a pizza in return.
# ------------------------------------------------------------------


# Defaults and "configuration".
EDITOR=${EDITOR:-vim}
itemsbase=${XDG_DATA_HOME:-"$(dirname "$0")"}
itemsdir="$itemsbase/gitodo.items"

# These are essential.
shopt -s nullglob
shopt -u dotglob

__tput()
{
	# Only use tput if it's available and if stdout is a terminal. Usage
	# of color may be enforced, though.

	if which tput >/dev/null 2>&1
	then
		if [[ -t 1 ]] || [[ -n $GITODO_FORCE_COLOR ]]
		then
			tput "$@"
		fi
	fi
}

header()
{
	# Header.
	__tput bold
	echo 'O Prio        Deadline          ID   Subject'
	echo '- ----- --------------------- ------ -------'
	__tput sgr0
}

list_items()
{
	# List all items.

	# Process all item files and extract relevant fields.
	for i in i*
	do
		# Read priority and/or date.
		prio=$(sed -rn '1,5s/^prio: ?//p' "$i" | sed -n '1p;q')
		prio=${prio:-0}
		when=$(sed -rn '1,5s/^(when|dead): ?//p' "$i" | sed -n '1p;q')
		whennorm=$(date -d "$when" '+%F %T')

		# Find out whether it's date + time, only date or only time.
		spaces=${when//[^ ]/}
		spaces=${#spaces}
		colons=${when//[^:]/}
		colons=${#colons}

		case $spaces in
			0)
				if (( colons > 0 ))
				then
					# Only time.
					timetype=0
				else
					# Only date.
					timetype=1
				fi
				;;
			1)
				# Date and time.
				timetype=2
				;;
		esac

		if [[ "$when" == "" ]]
		then
			# No date or time.
			timetype=3
			whennorm='2038-01-01 00:00:00'
		fi

		# Read warning period. Defaults to one hour before the deadline.
		warn=$(sed -rn '1,5s/^warn: ?//p' "$i" | sed -n '1p;q')
		warn=${warn:-1}

		# Print these infos so they can be sorted. Then read them again.
		echo "$prio $whennorm $warn $timetype $i"
	done |
	sort -n |
	while read -r prio day time warn timetype file
	do
		# Pretty printing.

		# Find out if the deadline has passed.
		stampnow=$(date '+%s')
		stampitem=$(date -d "$day $time" '+%s')
		taskdiff=$((stampnow - stampitem))
		if (( timetype != 3 ))
		then
			if (( taskdiff > 0 ))
			then
				__tput bold
				__tput setaf 1
				echo -n '! '
				__tput sgr0
			elif (( taskdiff > -warn * 3600 ))
			then
				__tput setaf 1
				echo -n '* '
				__tput sgr0
			else
				echo -n '  '
			fi
		else
			echo -n '  '
		fi

		# Highlight according to priority.
		if (( prio < -5 ))
		then
			__tput bold
			__tput setaf 1
		elif (( prio < 0 ))
		then
			__tput setaf 1
		elif (( prio > 5 ))
		then
			__tput setaf 4
		elif (( prio > 0 ))
		then
			__tput setaf 2
		fi
		printf '[%3s] ' "$prio"

		# Show only those time fields that are set in the item's file.
		case $timetype in
			0) echo -n "[           $time]" ;;
			1) echo -n "[$day         ]" ;;
			2) echo -n "[$day $time]" ;;
			3) echo -n "[                   ]" ;;
		esac

		# Print the id of the item.
		filename=$(echo "$file" | sed 's/^[^0-9]\+// ; s/^0\+//')
		printf ' [%4d] ' "$filename"

		# Print the subject of the item.
		sed -rn '1,5s/^(subject|what): ?//p' "$file" | sed -n '1p;q'

		__tput sgr0
	done
}

cron_output()
{
	# Show outdated tasks and those whose deadline is close.

	# Find relevant tasks.
	out=$(list_items)
	outdated=$(echo "$out" | grep '^!')
	warning=$(echo "$out" | grep '^\*')

	# Pretty printing.
	if [[ "$outdated" != "" ]]
	then
		echo 'OUTDATED TASKS:'
		echo '==============='
		echo
		(
			header
			echo "$outdated"
		) | sed 's/^/    /'

		if [[ "$warning" != "" ]]
		then
			echo
			echo
		fi
	fi
	if [[ "$warning" != "" ]]
	then
		echo 'DEADLINE CLOSE:'
		echo '==============='
		echo
		(
			header
			echo "$warning"
		) | sed 's/^/    /'
	fi
}

new_item()
{
	# Get the first free ID.

	next=1
	while [[ -f "i$(printf '%04d' "$next")" ]]
	do
		((next++))
	done

	$EDITOR "i$(printf '%04d' "$next")"
}

complete_id()
{
	# Complete an ID (like "12") by removing any leading zeroes (needed
	# so that printf doesn't think it's an octal number). Then pad that
	# number with the right amount of zeroes. Result: "0012".

	item=$(echo "$1" | sed 's/^0\+//')
	item=$(printf '%04d' $item)
	echo "i$item"
}

checkrepo()
{
	# Initialize the repo (if needed) and cd to it.

	mkdir -p "$itemsdir"
	cd "$itemsdir"
	[[ -d .git ]] || git init
}

commit()
{
	# Commit all changes in the repo.

	git add .
	git commit -a -m "Auto-commit $HOSTNAME."
}

checkrepo

case "$1" in
	--show|-show|show|--s|-s|s)
		shift
		for i
		do
			$EDITOR "$(complete_id "$i")"
		done
		commit
		;;
	--new|-new|new|--n|-n|n)
		new_item
		commit
		;;
	--delete|-delete|delete|--d|-d|d)
		shift
		for i
		do
			rm -v "$(complete_id "$i")"
		done
		commit
		;;
	--log|-log|log|--l|-l|l)
		shift
		git log --oneline --decorate --graph "$@"
		;;
	--cron|-cron|cron|--c|-c|c)
		cron_output
		;;
	--help|-help|help|--h|-h|h)
		cat <<EOM
Usage: $(basename "$0") [options]...

  -s, --show id [id...]      Edit all given IDs using \$EDITOR.
  -n, --new                  Add a new task. You'll be put in your
                             \$EDITOR to do so.
  -d, --delete id [id...]    Delete all given IDs.
  -l, --log [options]        Show log of the items repository. Add
                             options to "git log" if desired.
  -c, --cron                 Show a list of outdated tasks, suitable for
                             a cron job.
  -h, --help                 Show this help page.
EOM
		;;
	*)
		header
		list_items
		;;
esac

#!/bin/bash

# ------------------------------------------------------------------
# "THE PIZZA-WARE LICENSE" (Revision 42):
# Peter Hofmann <pcode@uninformativ.de> wrote this file. As long as you
# retain this notice you can do whatever you want with this stuff. If
# we meet some day, and you think this stuff is worth it, you can buy
# me a pizza in return.
# ------------------------------------------------------------------

EDITOR=${EDITOR:-vim}
itemsdir=items

shopt -s nullglob
shopt -u dotglob

cd "$(dirname "$(readlink -e "$0")")"

__tput()
{
	if which tput >/dev/null 2>&1 && [[ -t 1 ]]
	then
		tput "$@"
	fi
}

list_items()
{
	for i in "$itemsdir"/i*
	do
		# Read priority and/or date.
		prio=$(sed -rn '1,5s/^prio: ?//p' "$i" | sed -n '1p;q')
		prio=${prio:-0}
		when=$(sed -rn '1,5s/^when: ?//p' "$i" | sed -n '1p;q')
		whennorm=$(date -d "$when" '+%F %T')

		spaces=${when//[^ ]/}
		spaces=${#spaces}
		colons=${when//[^:]/}
		colons=${#colons}

		case $spaces in
			0)
				if (( colons > 0 ))
				then
					# Only time.
					timetype=0
				else
					# Only date.
					timetype=1
				fi
				;;
			1)
				# Date and time.
				timetype=2
				;;
		esac

		if [[ "$when" == "" ]]
		then
			# No date or time.
			timetype=3
		fi

		echo "$prio $whennorm $timetype $i"
	done | sort -k1n -k2n -k3n |
	while read -r prio day time timetype file
	do
		# Pretty printing.

		stampnow=$(date '+%s')
		stampitem=$(date -d "$day $time" '+%s')
		if (( timetype != 3 )) && (( stampnow - stampitem > 0 ))
		then
			echo -n '[!] '
		else
			echo -n '    '
		fi

		if (( prio < -5 ))
		then
			__tput bold
			__tput setaf 1
		elif (( prio < 0 ))
		then
			__tput setaf 1
		elif (( prio > 5 ))
		then
			__tput setaf 4
		elif (( prio > 0 ))
		then
			__tput setaf 2
		fi
		printf '[%3s] ' "$prio"

		case $timetype in
			0) echo -n "[           $time]" ;;
			1) echo -n "[$day         ]" ;;
			2) echo -n "[$day $time]" ;;
			3) echo -n "[                   ]" ;;
		esac

		filename=$(echo "$file" | sed 's/^[^0-9]\+// ; s/^0\+//')
		printf ' [%4d]: ' "$filename"

		sed -rn '1,5s/^(subject|what): ?//p' "$file" | sed -n '1p;q'
		__tput sgr0
	done
}

new_item()
{
	existing=("$itemsdir"/i*)
	if (( "${#existing[@]}" == 0 ))
	then
		next=1
	else
		last=${existing[$((${#existing[@]} - 1))]}
		last=$(echo "$last" | sed 's/^[^0-9]\+// ; s/^0\+//')
		next=$((last + 1))
	fi
	next=$(printf '%04d' $next)

	$EDITOR "$itemsdir/i$next"
}

pullall()
{
	(
		cd "$itemsdir"
		pwdabs=$(readlink -e .)
		while read -r host path
		do
			if [[ "$host" != "$HOSTNAME" ]]
			then
				# Pull from another machine on the net.
				git pull "ssh://$host$path" master
			elif [[ "$path" != "$pwdabs" ]]
			then
				# Pull locally.
				git pull "$path" master
			fi
		done < remotes
	)
}

complete_id()
{
	item=$(echo "$1" | sed 's/^0\+//')
	item=$(printf '%04d' $item)
	echo "$itemsdir/i$item"
}

checkrepo()
{
	(
		cd "$itemsdir"
		[[ -d .git ]] || git init
	)
}

commit()
{
	(
		cd "$itemsdir"
		git add .
		git commit -a -m "Auto-commit $HOSTNAME."
	)
}

checkrepo

case "$1" in
	--show|-show|show|--s|-s|s)
		shift
		for i
		do
			$EDITOR "$(complete_id "$i")"
		done
		commit
		;;
	--new|-new|new|--n|-n|n)
		new_item
		commit
		;;
	--delete|-delete|delete|--d|-d|d)
		shift
		for i
		do
			rm -v "$(complete_id "$i")"
		done
		commit
		;;
	--log|-log|log|--l|-l|l)
		cd "$itemsdir"
		git log --oneline --decorate --graph
		;;
	--pull|-pull|pull|--p|-p|p)
		pullall
		;;
	*)
		list_items
		;;
esac
